{"version":3,"file":"assets/js/f7f1d636.df7b6f9d.js","mappings":"kQAUO,MAAMA,EAAc,CAAC,EACfC,EAAe,SACfC,EAAW,CACtB,cAAiB,kBACjB,GAAM,kBACN,MAAS,SACT,YAAe,yPACf,OAAU,gCACV,cAAiB,WACjB,KAAQ,mBACR,UAAa,kCACb,OAAS,EACT,QAAW,yFACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,YACX,SAAY,CACV,MAAS,WACT,UAAa,sCAEf,KAAQ,CACN,MAAS,wBACT,UAAa,mDAGJC,EAAS,CAEtB,EAGaC,EAAM,CAAC,CAClBC,MAAO,kBACPC,GAAI,kBACJC,MAAO,GACN,CACDF,MAAO,iBACPC,GAAI,iBACJC,MAAO,GACN,CACDF,MAAO,+BACPC,GAAI,+BACJC,MAAO,GACN,CACDF,MAAO,qBACPC,GAAI,qBACJC,MAAO,GACN,CACDF,MAAO,sBACPC,GAAI,sBACJC,MAAO,GACN,CACDF,MAAO,uBACPC,GAAI,uBACJC,MAAO,GACN,CACDF,MAAO,0BACPC,GAAI,0BACJC,MAAO,GACN,CACDF,MAAO,oBACPC,GAAI,oBACJC,MAAO,IAGHC,EAAc,CAClBJ,OAGa,SAASK,EAAW,GAG/B,IAH+B,WACjCC,KACGC,GACJ,EACC,OAAO,QALS,WAKC,UAAKH,EAAiBG,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAE5E,cACE,GAAM,UACH,WACL,iBAAK,sBAAoB,sBAAYC,WAAW,KAAM,kBAA+B,gCAA8B,sBAAYA,WAAW,KAAM,mBAAgC,SAAO,sBAAYA,WAAW,KAAM,kBAA+B,+DAA6D,sBAAYA,WAAW,KAAM,iBAA8B,SAAO,sBAAYA,WAAW,KAAM,WAAwB,yEACva,cACE,GAAM,mBACH,oBACL,iBAAK,yBAAuB,sBAAYA,WAAW,KAAM,mBAAgC,aAAW,aAAGA,WAAW,IAC9G,KAAQ,uCACL,aAAiB,uDACxB,iBAAK,kBAAgB,aAAGA,WAAW,IAC/B,KAAQ,wBACL,uBAA2B,MAClC,cACE,GAAM,kBACH,mBACL,iBAAK,wBAAsB,sBAAYA,WAAW,KAAM,iBAA8B,SAAO,sBAAYA,WAAW,KAAM,WAAwB,cAAY,sBAAYA,WAAW,KAAM,QAAqB,YAChN,cACE,GAAM,gCACH,iCACL,cACE,GAAM,sBACH,uBACL,iBAAK,iDAA+C,sBAAYA,WAAW,KAAM,oBAAiC,mBAAiB,sBAAYA,WAAW,KAAM,aAA0B,MAC1L,iBAAK,iCAA+B,sBAAYA,WAAW,KAAM,sBAAmC,0BAAwB,sBAAYA,WAAW,KAAM,YAAyB,UAAQ,sBAAYA,WAAW,KAAM,eACvN,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,qTAaP,cACE,GAAM,uBACH,wBACL,iBAAK,qBAAmB,sBAAYA,WAAW,KAAM,aAA0B,kCAC/E,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,uQAYP,cACE,GAAM,wBACH,yBACL,iBAAK,qBAAmB,sBAAYA,WAAW,KAAM,aAA0B,oCAC/E,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,iWAkBP,cACE,GAAM,2BACH,4BACL,iBAAK,qBAAmB,sBAAYA,WAAW,KAAM,aAA0B,yCAC/E,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,kUAcP,cACE,GAAM,qBACH,sBACL,iBAAK,qBAAmB,sBAAYA,WAAW,KAAM,kBAA+B,cAAY,sBAAYA,WAAW,KAAM,QAAqB,MAClJ,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,4WAmBX,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://@autoviews/website/./docs/entities/events.md"],"sourcesContent":["\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Events';\nexport const metadata = {\n  \"unversionedId\": \"entities/events\",\n  \"id\": \"entities/events\",\n  \"title\": \"Events\",\n  \"description\": \"Each component in ComponentsRepo could emit special events: AutoChangeEvent and AutoClickEvent. Those events contains original event and in addition has schemaPointer and pointer properties which helps understand where is the source of the event.\",\n  \"source\": \"@site/docs/entities/events.md\",\n  \"sourceDirName\": \"entities\",\n  \"slug\": \"/entities/events\",\n  \"permalink\": \"/autoviews/docs/entities/events\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/entities/events.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"UISchema\",\n    \"permalink\": \"/autoviews/docs/entities/ui-schema\"\n  },\n  \"next\": {\n    \"title\": \"Repository Components\",\n    \"permalink\": \"/autoviews/docs/entities/repository-components\"\n  }\n};\nexport const assets = {\n\n};\n\n\nexport const toc = [{\n  value: 'AutoChangeEvent',\n  id: 'autochangeevent',\n  level: 2\n}, {\n  value: 'AutoClickEvent',\n  id: 'autoclickevent',\n  level: 2\n}, {\n  value: 'Construcing AutoEventHandler',\n  id: 'construcing-autoeventhandler',\n  level: 2\n}, {\n  value: 'changeEventHandler',\n  id: 'changeeventhandler',\n  level: 3\n}, {\n  value: 'addItemEventHandler',\n  id: 'additemeventhandler',\n  level: 3\n}, {\n  value: 'addFieldEventHandler',\n  id: 'addfieldeventhandler',\n  level: 3\n}, {\n  value: 'removeFieldEventHandler',\n  id: 'removefieldeventhandler',\n  level: 3\n}, {\n  value: 'clickEventHandler',\n  id: 'clickeventhandler',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h1>\n    <p>{`Each component in `}<inlineCode parentName=\"p\">{`ComponentsRepo`}</inlineCode>{` could emit special events: `}<inlineCode parentName=\"p\">{`AutoChangeEvent`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`AutoClickEvent`}</inlineCode>{`. Those events contains original event and in addition has `}<inlineCode parentName=\"p\">{`schemaPointer`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`pointer`}</inlineCode>{` properties which helps understand where is the source of the event.`}</p>\n    <h2 {...{\n      \"id\": \"autochangeevent\"\n    }}>{`AutoChangeEvent`}</h2>\n    <p>{`When component emits `}<inlineCode parentName=\"p\">{`AutoChangeEvent`}</inlineCode>{` it adds `}<a parentName=\"p\" {...{\n        \"href\": \"https://tools.ietf.org/html/rfc6902\"\n      }}>{`JSONPatch`}</a>{` to it. With it is super easy to handle the state.`}</p>\n    <p>{`Check out the `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/examples/basic\"\n      }}>{`Basic Usage example`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"autoclickevent\"\n    }}>{`AutoClickEvent`}</h2>\n    <p>{`This event, besides `}<inlineCode parentName=\"p\">{`schemaPointer`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`pointer`}</inlineCode>{` provides `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` field.`}</p>\n    <h2 {...{\n      \"id\": \"construcing-autoeventhandler\"\n    }}>{`Construcing AutoEventHandler`}</h2>\n    <h3 {...{\n      \"id\": \"changeeventhandler\"\n    }}>{`changeEventHandler`}</h3>\n    <p>{`AutoViews provides utilities that can create `}<inlineCode parentName=\"p\">{`AutoEventHandler`}</inlineCode>{` that contains `}<inlineCode parentName=\"p\">{`JSONPatch`}</inlineCode>{`.`}</p>\n    <p>{`In this example we are using `}<inlineCode parentName=\"p\">{`changeEventHandler`}</inlineCode>{` utility to construct `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`JSONPatch`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {changeEventHandler} from '@autoviews/core';\n\nconst myRepo = new ComponentsRepo('myRepo');\nmyRepo.register('string', {\n  name: 'myInput',\n  component: props => (\n    <input\n      value={props.data}\n      onChange={changeEventHandler(props, e => e.currentTarget.value)}\n    />\n  )\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"additemeventhandler\"\n    }}>{`addItemEventHandler`}</h3>\n    <p>{`Helper to create `}<inlineCode parentName=\"p\">{`JSONPatch`}</inlineCode>{` that adds item to the array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myRepo = new ComponentsRepo('MyRepo');\nmyRepo.register('array', {\n  name: 'MyArray',\n  component: props => {\n    return (\n      <button onClick={addItemEventHandler(props, () => 'new item')}>\n        Add item\n      </button>\n    );\n  }\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"addfieldeventhandler\"\n    }}>{`addFieldEventHandler`}</h3>\n    <p>{`Helper to create `}<inlineCode parentName=\"p\">{`JSONPatch`}</inlineCode>{` that adds field to the object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myRepo = new ComponentsRepo('MyRepo');\nmyRepo.register('object', {\n  name: 'MyObject',\n  component: props => {\n    return (\n      <button\n        onClick={addFieldEventHandler(\n          props,\n          () => 10,\n          () => 'age'\n        )}\n      >\n        Add field 'age' with value 10\n      </button>\n    );\n  }\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"removefieldeventhandler\"\n    }}>{`removeFieldEventHandler`}</h3>\n    <p>{`Helper to create `}<inlineCode parentName=\"p\">{`JSONPatch`}</inlineCode>{` that removes field from the object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myRepo = new ComponentsRepo('MyRepo');\n// ... register object\n\nmyRepo.register('string', {\n  name: 'MyStringComponent',\n  component: props =>\n    props.data ? (\n      <span>\n        {props.data}\n        <button onClick={removeEventHandler(props)}>remove me</button>\n      </span>\n    ) : null\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"clickeventhandler\"\n    }}>{`clickEventHandler`}</h3>\n    <p>{`Helper to create `}<inlineCode parentName=\"p\">{`AutoClickEvent`}</inlineCode>{` with any `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myRepo = new ComponentsRepo('MyRepo');\nmyRepo.register('string', {\n  name: 'MyStringComponent',\n  component: props => (\n    <span>\n      {props.data}\n      <button\n        onClick={clickEventHandler({\n          ...props,\n          data: \"hey I've been clicked\"\n        })}\n      >\n        Click me\n      </button>\n    </span>\n  )\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}